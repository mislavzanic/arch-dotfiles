#!/bin/bash

parse_yaml() {
    result=($(yq "$1" "$2" | sed 's/\"//g' | tr '\n' ' '))
    echo "${result[@]}"
}

clean_xmonad() {
    cd $HOME/dotfiles/.config/xmonad
    rm -rf .stack-work
    rm -rf mexmonad.cabal
    rm -rf stack.yaml.lock
    rm -rf xmonad.hi xmonad.o
}

backup_git() {
    cd "$1"
    git add .
    git commit -m "$2"
    git push origin master
}

move_dir() {
    [ -d "$1/$3" ] &&  rm -rf "$2/$3" && cp -r "$1/$3" "$2"
}

backup_sys_dots() {
    repo=$(parse_yaml '.backup.repo[]' "$HOME/.config/config.yaml")
    git clone $repo $HOME/dotfiles
    local_dirs=$(parse_yaml '.backup.local[]' "$HOME/.config/config.yaml")
    move_dir "$HOME/.local" "$HOME/dotfiles/.local" "bin/scripts"
    config_dirs=$(parse_yaml '.backup.config[]' "$HOME/.config/config.yaml")
    for item in $config_dirs; do
        move_dir "${XDG_CONFIG_HOME:-$HOME/.config}" "$HOME/dotfiles/.config" "$item"
    done
    clean_xmonad
    backup_git $HOME/dotfiles "$1"
    cd $HOME
    rm -rf $HOME/dotfiles
}

backup_install() {
    [ -d $HOME/.local/bin/arch_install ] && { backup_git $HOME/.local/bin/arch_install "$1" && exit; } || { git clone git@github.com:mislavzanic/arch_install.git && exit; }
}

backup() {
    [ "$1" == 'dots' ] && backup_sys_dots "$2"
    [ "$1" == 'install' ] && backup_install "$2"
}

BACKUP=''
MESSAGE='backup'

while [ $# -gt 0 ]; do

   if [[ $1 == *"--"* ]]; then
        param="${1/--/}"
        [ $param == 'backup' ] && BACKUP="$2"
        [ $param == 'message' ] && MESSAGE="$2"
   fi

  shift
done

backup "$BACKUP" "$MESSAGE"
